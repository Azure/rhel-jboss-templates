name: Validate eap-aro offer

on:
  workflow_dispatch:
    inputs:
      useExistingCluster:
        description: 'Use existing ARO cluster?'
        required: true
        type: boolean
        default: false
      clusterName:
        description: 'Name of existing ARO cluster'
        required: false
        type: string
        default: ''
      clusterRGName:
        description: 'Resource group Name of existing ARO cluster'
        required: false
        type: string
        default: ''
      timeWaitBeforeDelete:
        description: 'Choose the wait time before deleting resources: 30m (30 minutes), 2h (2 hours), 5h (5 hours), 0 (immediately)'
        required: true
        type: choice
        default: 0
        options:
          - 30m
          - 2h
          - 5h
          - 0
      configurations_for_ci:
        description: "JSON string of environment variables used for CI"
        required: false
        default: '{}'

env:
  azCliVersion: 2.72.0
  location: eastus2
  resourceGroup: aro-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
  azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
  gitUserName: ${{ secrets.USER_NAME }}
  gitEmail: ${{ secrets.USER_EMAIL }}
  # To get pull secret text, see Get a Red Hat pull secret.
  # https://learn.microsoft.com/en-us/azure/openshift/tutorial-create-cluster?WT.mc_id=Portal-fx#get-a-red-hat-pull-secret-optional
  pullSecret: ${{ secrets.PULL_SECRET }}
  conRegAccUserName: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  conRegAccPwd: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  offerName: "eap-aro"

jobs:
  preflight:
    outputs:
      artifactName: ${{steps.build.outputs.artifactName}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
      - name: build
        id: build
        uses: ./.github/actions/build
        with:
          offerName: ${{ env.offerName }}
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowType: "validate"

  deploy-eap-aro:
    outputs:
      aadClientId: ${{steps.prepare-parameter-file.outputs.aadClientId}}
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
      - name: build
        id: build
        uses: ./.github/actions/build
        with:
          offerName: ${{ env.offerName }}
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowType: "build"
          uploadArtifact: false
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Prepare parameter file
        id: prepare-parameter-file
        run: |
          export servicePrincipal=${azureCredentials}
          export aadClientId=$(echo $servicePrincipal | jq -r '.clientId')
          echo "aadClientId=${aadClientId}" >> $GITHUB_OUTPUT
          export aadClientSecret=$(echo $servicePrincipal | jq -r '.clientSecret')
          export aadObjectId=$(az ad sp show --id ${aadClientId} --query id -o tsv)
          # rpObjectId=$(az ad sp list --display-name "Azure Red Hat OpenShift RP" --query "[0].id" -o tsv)
          export rpObjectId="ebeeb6e8-af58-4204-9e58-efca7922a3cc"
          
          if [ "${{ github.event.inputs.useExistingCluster }}" == "true" ]; then
            echo "Using existing ARO cluster"
            export createCluster=false
          else
            echo "Creating new ARO cluster"
            export createCluster=true
          fi
          
          # if ${{ github.event.inputs.clusterName }} is empty, then set it to the default name
          if [ -z "${{ github.event.inputs.clusterName }}" ]; then
              export clusterName="aro-cluster-${{ github.repository_owner }}"
          else
              export clusterName="${{ github.event.inputs.clusterName }}"
          fi
          # if ${{ github.event.inputs.clusterRGName }} is empty, then set it to the default name
          if [ -z "${{ github.event.inputs.clusterRGName }}" ]; then
              export clusterRGName="aro-rg-${{ github.repository_owner }}"
          else
              export clusterRGName="${{ github.event.inputs.clusterRGName }}"
          fi
          
          ## Prepare other parameters
          export gitUserName=${{ github.repository_owner }}
          export testbranchName=${{ github.sha }}
          export vmSize="Standard_D8s_v3"
          export workerVmSize="Standard_D4s_v3"
          export workerCount=3

          ## generate parameter file
          parameter_template="./${{ env.offerName }}/src/test/scripts/parameters-template.json"
          parameter_output="./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json"
          envsubst < "$parameter_template" > "$parameter_output"

      - name: Archive parameters-test-${{ env.offerName }}-${{ github.job }}.json
        uses: actions/upload-artifact@v4.6.2
        if: success()
        with:
          name: parameters-test-${{ env.offerName }}-${{ github.job }}
          path: ./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json

      - name: Create Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "create resource group" ${{ env.resourceGroup }}
            az group create --verbose --name ${{ env.resourceGroup }} --location ${{ env.location }}

      - name: Deploy JBoss EAP ${{ env.offerName }}
        uses: azure/cli@v2
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            az deployment group create \
            --verbose \
            --resource-group ${{ env.resourceGroup }} \
            --name ${{ env.offerName }} \
            --parameters @./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
            --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json

      - name: Query endpoint from deployment script
        id: query-endpoint
        run: |
          resourceName=$(az resource list -g ${{ env.resourceGroup }} --resource-type Microsoft.Resources/deploymentScripts --query "[?starts_with(name, 'jboss-setup')].name" -o tsv)
          
          # Use the retrieved resource name to get the appEndpoint
          appEndpoint=$(az resource show -n $resourceName -g ${{ env.resourceGroup }} --resource-type Microsoft.Resources/deploymentScripts --query "properties.outputs.appEndpoint" -o tsv)

          echo "appEndpoint=${appEndpoint}" >> "$GITHUB_OUTPUT"

      - name: Verify the endpoint is accessible
        uses: ./.github/actions/url-health-check
        with:
          appEndpoint: "${{steps.query-endpoint.outputs.appEndpoint}}/services/javadetails"
          maxRetries: 10
          retryInterval: 20

  resources-cleanup:
    name: resources-cleanup after ${{ github.event.inputs.timeWaitBeforeDelete }}
    needs:
      - preflight
      - deploy-eap-aro
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
        with:
          path: rhel-jboss-templates
      - name: Pause ${{ github.event.inputs.timeWaitBeforeDelete }} before deleting resources
        run: |
          echo "Sleeping for ${{ github.event.inputs.timeWaitBeforeDelete }}"
          sleep ${{ github.event.inputs.timeWaitBeforeDelete }}
      - name: Delete Resource Group
        if: always()
        id: delete-resource-group
        run: |
          echo "delete... " $resourceGroup
          az group delete --yes --no-wait --verbose --name $resourceGroup