name: Validate eap-aro offer

on:
  workflow_dispatch:
    inputs:
      useExistingCluster:
        description: 'Use existing ARO cluster?'
        required: true
        type: boolean
        default: false
      clusterName:
        description: 'Name of existing ARO cluster'
        required: false
        type: string
        default: ''
      clusterRGName:
        description: 'Resource group Name of existing ARO cluster'
        required: false
        type: string
        default: ''
      timeWaitBeforeDelete:
        description: 'Choose the wait time before deleting resources: 30m (30 minutes), 2h (2 hours), 5h (5 hours), 0 (immediately)'
        required: true
        type: choice
        default: 0
        options:
          - 30m
          - 2h
          - 5h
          - 0

env:
  azCliVersion: 2.30.0
  location: eastus
  aroResourceGroup: aro-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
  aroTestBranchName: aro-cicd-${{ github.run_id }}-${{ github.run_number }}

  azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
  gitUserName: ${{ secrets.USER_NAME }}
  gitEmail: ${{ secrets.USER_EMAIL }}
  # To get pull secret text, see Get a Red Hat pull secret.
  # https://learn.microsoft.com/en-us/azure/openshift/tutorial-create-cluster?WT.mc_id=Portal-fx#get-a-red-hat-pull-secret-optional
  pullSecret: ${{ secrets.PULL_SECRET }}

  offerName: "eap-aro"

jobs:
  preflight:
    outputs:
      artifactName: ${{steps.build.outputs.artifactName}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
      - name: build
        id: build
        uses: ./.github/actions/build
        with:
          offerName: ${{ env.offerName }}
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowType: "validate"

  deploy-eap-aro:
    outputs:
      aadClientId: ${{steps.prepare-parameter-file.outputs.aadClientId}}
    needs: preflight
    runs-on: ubuntu-latest
    steps:
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
        with:
          path: rhel-jboss-templates
      - name: Download artifact for test branch
        uses: actions/download-artifact@v4
        with:
          name: ${{needs.preflight.outputs.artifactName}}
          path: rhel-jboss-templates-dev
      - name: Create a new branch with built artifact
        run: |
          current=`pwd`
          echo "current=${current}" >> "$GITHUB_ENV"
          cd rhel-jboss-templates
          git config --global core.longpaths true
          git config --global user.email $gitEmail
          git config --global user.name $gitUserName
          echo "create branch $aroTestBranchName"
          git checkout -b $aroTestBranchName
          rm -r -f $current/rhel-jboss-templates/eap-aro/src/main/*
          cp -r -f $current/rhel-jboss-templates-dev/* $current/rhel-jboss-templates/eap-aro/
          git add .
          git status
          git commit -m "test branch for pipeline"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git -f
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Prepare parameter file
        id: prepare-parameter-file
        run: |
          servicePrincipal=${azureCredentials}
          aadClientId=$(echo $servicePrincipal | jq -r '.clientId')
          echo "aadClientId=${aadClientId}" >> $GITHUB_OUTPUT
          aadClientSecret=$(echo $servicePrincipal | jq -r '.clientSecret')
          aadObjectId=$(az ad sp show --id ${aadClientId} --query id -o tsv)
          # rpObjectId=$(az ad sp list --display-name "Azure Red Hat OpenShift RP" --query "[0].id" -o tsv)
          rpObjectId="ebeeb6e8-af58-4204-9e58-efca7922a3cc"
          
          if [ "${{ github.event.inputs.useExistingCluster }}" == "true" ]; then
            createCluster=false
          else
            createCluster=true
          fi
          
          echo "generate parameter file for eap-aro"
          params="rhel-jboss-templates/eap-aro/src/test/parameters-test-eap-aro.json  \
          ${gitUserName} \
          ${aroTestBranchName} \
          ${location} \
          ${pullSecret} \
          ${aadClientId} \
          ${aadClientSecret} \
          ${aadObjectId} \
          ${rpObjectId} \
          "Standard_D8s_v3" \
          "Standard_D4s_v3" \
          3 \
          ${createCluster} \
          ${{ github.event.inputs.clusterName }} \
          ${{ github.event.inputs.clusterRGName }}
          "
          echo $params |bash rhel-jboss-templates/eap-aro/src/test/scripts/gen-parameters.sh 

      - name: Archive parameters-test-eap-aro.json
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: parameters-test-eap-aro
          path: rhel-jboss-templates/eap-aro/src/test/parameters-test-eap-aro.json

      - name: Create Resource Group
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            echo "create resource group" ${{ env.aroResourceGroup }}
            az group create --verbose --name ${{ env.aroResourceGroup }} --location ${{ env.location }}

      - name: Deploy JBoss EAP on ARO
        id: deploy-eap-aro
        uses: azure/CLI@v1
        with:
          azcliversion: ${{ env.azCliVersion }}
          inlineScript: |
            az deployment group create \
            --verbose \
            --resource-group ${{ env.aroResourceGroup }} \
            --name eap-on-aro \
            --parameters @rhel-jboss-templates/eap-aro/src/test/parameters-test-eap-aro.json \
            --template-file rhel-jboss-templates/eap-aro/mainTemplate.json

      - name: Verify the deployment
        run: |
          # Get the resource name dynamically based on the pattern
          resourceName=$(az resource list -g ${{ env.aroResourceGroup }} --resource-type Microsoft.Resources/deploymentScripts --query "[?starts_with(name, 'jboss-setup')].name" -o tsv)
          
          # Use the retrieved resource name to get the appEndpoint
          appEndpoint=$(az resource show -n $resourceName -g ${{ env.aroResourceGroup }} --resource-type Microsoft.Resources/deploymentScripts --query "properties.outputs.appEndpoint" -o tsv)

          echo "appEndpoint: ${appEndpoint}"
          
          echo "Verifying appEndpoint is accessible"
          curl --verbose ${appEndpoint}
          CURL_RETRY_PARMS="--connect-timeout 60 --max-time 180 --retry 10 --retry-delay 30 --retry-max-time 180 --retry-connrefused"
          response=$(curl ${CURL_RETRY_PARMS}  --write-out '%{http_code}' --silent --output /dev/null ${appEndpoint})
          echo "$response"
          if [ "$response" -ne 200 ]; then
            echo "appEndpoint is not accessible"
            exit 1
          else
            echo "appEndpoint is accessible"
          fi
          exit 0

      # - name: Setup tmate session
      #   if: ${{ failure() }}
      #   uses: mxschmitt/action-tmate@v3

  resources-cleanup:
    name: resources-cleanup after ${{ github.event.inputs.timeWaitBeforeDelete }}
    needs:
      - preflight
      - deploy-eap-aro
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Checkout rhel-jboss-templates
        uses: actions/checkout@v4
        with:
          path: rhel-jboss-templates
      - name: Pause ${{ github.event.inputs.timeWaitBeforeDelete }} before deleting resources
        run: |
          echo "Sleeping for ${{ github.event.inputs.timeWaitBeforeDelete }}"
          sleep ${{ github.event.inputs.timeWaitBeforeDelete }}
      - name: Delete Resource Group
        if: always()
        id: delete-resource-group
        run: |
          echo "delete... " $aroResourceGroup
          az group delete --yes --no-wait --verbose --name $aroResourceGroup
      - name: Delete Testing Branch
        if: always()
        run: |
          cd rhel-jboss-templates
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git -f --delete $aroTestBranchName  
