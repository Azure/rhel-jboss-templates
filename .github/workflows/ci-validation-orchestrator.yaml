name: CI Validation Orchestrator
run-name: Running validation workflows with different combinations

on:
  workflow_dispatch:
    inputs:
      plan_file:
        description: 'Path to the validation plan file'
        required: true
        default: '.github/ci/validation-plan-build.json'
        type: string

jobs:
  read-plan:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Read validation plan
        id: set-matrix
        run: |
          PLAN_FILE="${{ inputs.plan_file }}"
          if [ ! -f "$PLAN_FILE" ]; then
            echo "Error: Plan file $PLAN_FILE not found"
            exit 1
          fi
          
          # Create matrix from plan
          MATRIX=$(jq -c '.validation_combinations | map({
            workflow: .workflow,
            combinations: .combinations
          })' "$PLAN_FILE")
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  run-validations:
    needs: read-plan
    strategy:
      matrix:
        include: ${{ fromJson(needs.read-plan.outputs.matrix) }}
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.collect-results.outputs.results }}
    steps:
      - name: Run validation workflow
        id: run-workflow
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = '${{ matrix.workflow }}';
            const combinations = ${{ toJSON(matrix.combinations) }};
            const results = [];
            
            for (const combo of combinations) {
              console.log(`Triggering ${workflow} with:`, combo);
              
              // Trigger the workflow
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                ref: context.ref,
                inputs: combo
              });
              
              // Wait for 30 seconds for the workflow to be created
              await new Promise(resolve => setTimeout(resolve, 30000));
              
              // Get the latest workflow run
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow,
                branch: context.ref,
                per_page: 1
              });
              
              if (!runs.data.workflow_runs || runs.data.workflow_runs.length === 0) {
                console.log('No workflow runs found, waiting longer...');
                await new Promise(resolve => setTimeout(resolve, 30000));
                continue;
              }
              
              const runId = runs.data.workflow_runs[0].id;
              console.log(`Found workflow run ID: ${runId}`);
              
              // Wait for the workflow to complete
              let status = 'queued';
              let attempts = 0;
              const maxAttempts = 40; // 20 minutes maximum wait time
              
              while (status !== 'completed' && attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 30000));
                const run = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });
                status = run.data.status;
                console.log(`Workflow status: ${status} (attempt ${attempts + 1}/${maxAttempts})`);
                attempts++;
              }
              
              if (status !== 'completed') {
                console.log('Workflow did not complete within the maximum wait time');
                results.push({
                  workflow: workflow,
                  combination: combo,
                  status: 'timeout',
                  runId: runId,
                  runUrl: runs.data.workflow_runs[0].html_url,
                  startTime: runs.data.workflow_runs[0].created_at,
                  endTime: new Date().toISOString()
                });
                continue;
              }
              
              results.push({
                workflow: workflow,
                combination: combo,
                status: runs.data.workflow_runs[0].conclusion,
                runId: runId,
                runUrl: runs.data.workflow_runs[0].html_url,
                startTime: runs.data.workflow_runs[0].created_at,
                endTime: runs.data.workflow_runs[0].updated_at
              });
            }
            
            core.setOutput('results', JSON.stringify(results));

      - name: Collect results
        id: collect-results
        run: |
          echo "results=${{ steps.run-workflow.outputs.results }}" >> $GITHUB_OUTPUT

  generate-report:
    needs: run-validations
    runs-on: ubuntu-latest
    steps:
      - name: Generate HTML report
        run: |
          cat << 'EOF' > report.html
          <!DOCTYPE html>
          <html>
          <head>
            <title>Validation Workflow Results</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              table { border-collapse: collapse; width: 100%; margin-top: 20px; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; position: sticky; top: 0; }
              .success { background-color: #dff0d8; }
              .failure { background-color: #f2dede; }
              .pending { background-color: #fcf8e3; }
              .timeout { background-color: #f8d7da; }
              a { color: #0066cc; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .summary { margin: 20px 0; padding: 15px; background-color: #f8f9fa; border-radius: 5px; }
              .timestamp { color: #666; font-size: 0.9em; }
              .combination { font-family: monospace; }
            </style>
          </head>
          <body>
            <h1>Validation Workflow Results</h1>
            <div class="summary">
              <h2>Summary</h2>
              <p>Total Workflows: <span id="total-count">0</span></p>
              <p>Successful: <span id="success-count">0</span></p>
              <p>Failed: <span id="failure-count">0</span></p>
              <p>Timed Out: <span id="timeout-count">0</span></p>
            </div>
            <table>
              <tr>
                <th>Workflow</th>
                <th>Combination</th>
                <th>Status</th>
                <th>Duration</th>
                <th>Run URL</th>
              </tr>
              ${{ join(needs.run-validations.outputs.results, '') }}
            </table>
            <script>
              function updateSummary() {
                const rows = document.querySelectorAll('tr:not(:first-child)');
                const total = rows.length;
                const success = document.querySelectorAll('.success').length;
                const failure = document.querySelectorAll('.failure').length;
                const timeout = document.querySelectorAll('.timeout').length;
                
                document.getElementById('total-count').textContent = total;
                document.getElementById('success-count').textContent = success;
                document.getElementById('failure-count').textContent = failure;
                document.getElementById('timeout-count').textContent = timeout;
              }
              
              // Update summary when page loads
              document.addEventListener('DOMContentLoaded', updateSummary);
            </script>
          </body>
          </html>
          EOF
          
          # Replace the placeholder with actual results
          RESULTS='${{ needs.run-validations.outputs.results }}'
          for row in $(echo "$RESULTS" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            workflow=$(_jq '.workflow')
            combination=$(_jq '.combination')
            status=$(_jq '.status')
            runUrl=$(_jq '.runUrl')
            startTime=$(_jq '.startTime')
            endTime=$(_jq '.endTime')
            
            # Calculate duration
            start=$(date -d "$startTime" +%s)
            end=$(date -d "$endTime" +%s)
            duration=$((end - start))
            duration_str=$(printf '%dh:%dm:%ds' $((duration/3600)) $((duration%3600/60)) $((duration%60)))
            
            # Create table row with appropriate status class
            row_html="<tr class='${status}'>
              <td>${workflow}</td>
              <td class='combination'>$(echo ${combination} | jq -r 'to_entries | map("\(.key): \(.value)") | join(", ")')</td>
              <td>${status}</td>
              <td class='timestamp'>${duration_str}</td>
              <td><a href='${runUrl}' target='_blank'>View Run</a></td>
            </tr>"
            
            # Replace placeholder with actual row
            sed -i "s|\${{ join(needs.run-validations.outputs.results, '') }}|${row_html}\n\${{ join(needs.run-validations.outputs.results, '') }}|" report.html
          done
          
          # Remove the placeholder
          sed -i 's|\${{ join(needs.run-validations.outputs.results, '') }}||' report.html

      - name: Upload report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: validation-report
          path: report.html
