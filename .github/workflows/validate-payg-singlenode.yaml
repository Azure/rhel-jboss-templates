name: Validate payg offer
run-name: Validate payg offer with `jdk`:${{ inputs.jdkVersion }} and `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
        - mssqlserver
        - mssqlserver-passwordless
        - mysql(flexible)
        - mysql-passwordless(flexible)
        - postgresql(flexible)
        - postgresql-passwordless(flexible)
        - none
      jdkVersion:
        description: 'jdkVersion'
        required: true
        default: 'eap8-openjdk17'
        type: choice
        options:
          - eap8-openjdk17
          - eap8-openjdk11
          - eap74-openjdk17
          - eap74-openjdk11
          - eap74-openjdk8
      timeWaitBeforeDelete:
        description: 'Choose the wait time before deleting resources: 30m (30 minutes), 2h (2 hours), 5h (5 hours), 0 (immediately)'
        required: true
        type: choice
        default: 0
        options:
          - 30m
          - 2h
          - 5h
          - 0
      configurations_for_it:
        description: "JSON string of environment variables used for IT"
        required: false
        default: '{}'

env:
    azCliVersion: 2.72.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS_PAYG }}
    location: eastus2
    resourceGroup: single-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    vmName: ${{ github.run_id }}${{ github.run_number }}vm
    adminUsername: azureadmin
    password: ${{ secrets.VM_PASSWORD }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    dbInstanceName: db${{ github.run_id }}${{ github.run_number }}
    dbPassword: ${{ secrets.DATABASE_PASSWORD }}
    singleStorageAccountName: singlesa
    jbossEAPUserName: jbossadmin
    jbossEAPPassword: ${{ secrets.JBOSS_EAP_USER_PASSWORD }}
    gitUserName: ${{ secrets.USER_NAME }}
    gitEmail: ${{ secrets.USER_EMAIL }}
    testPubIpName: testPubIp
    nsgName: jbosseap-nsg
    scriptLocation: https://raw.githubusercontent.com/${{ github.repository_owner }}/rhel-jboss-templates/$GITHUB_REF_NAME/utilities/
    offerName: "eap-rhel-payg"
    gracefulShutdownTimeout: "-1"

jobs:
    deploy-single:
        runs-on: ubuntu-latest
        env: ${{ fromJson(inputs.configurations_for_it) }}
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "build"
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Accept Image Terms
              id: accept-terms
              run: |
                  echo "accept terms for VM image"
                  az vm image terms accept --urn RedHat:rh-jboss-eap:rh-jboss-eap8-jdk17-rhel9:latest
                  az vm image terms accept --urn RedHat:rh-jboss-eap:rh-jboss-eap8-jdk11-rhel9:latest
            - name: Create Resource Group
              run: |
                az group create -n ${{ env.resourceGroup }} -l ${{ env.location }}

            - name: Provision Azure Vnet
              id: vnet-provision
              if: ${{ env.virtualNetworkNewOrExisting == 'existing' }}
              run: |
                echo "Provisioning Azure Vnet with subnet"
                az network vnet create \
                  --resource-group ${{ env.resourceGroup }} \
                  --name ${{ env.virtualNetworkName }} \
                  --address-prefix 10.0.0.0/28 \
                  --subnet-name ${{ env.subnetName }} \
                  --subnet-prefix 10.0.0.0/29
                  
            - name: Provision database
              id: database-provision
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.resourceGroup }}
                uamiName: ${{ env.uamiName }}
                location: ${{ env.location }}
                dbInstanceName: ${{ env.dbInstanceName }}
                dbPassword: ${{ env.dbPassword }}

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ steps.database-provision.outputs.uamiId }}
                serverHost: ${{ steps.database-provision.outputs.serverHost }}
                dbInstanceName: ${{ env.dbInstanceName }}

            - name: Prepare parameter file
              run: |
                ## Prepare Database parameters
                export databaseType=${{ steps.database-parameters.outputs.databaseType }}
                export enableDB=${{ steps.database-parameters.outputs.enableDB }}
                export enablePswlessConnection=${{ steps.database-parameters.outputs.enablePswlessConnection }}
                export dbUser=${{ steps.database-parameters.outputs.dbUser }}
                export dbPassword=${{ env.dbPassword }}
                export dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}
                export dbIdentity='${{ steps.database-parameters.outputs.dbIdentity }}'

                ## Prepare Vnet parameters
                if [ "${{ env.virtualNetworkNewOrExisting }}" == "existing" ]; then
                  export virtualNetworkResourceGroupName=${resourceGroup}
                  export virtualNetworkNewOrExisting=${{ env.virtualNetworkNewOrExisting }}
                  export virtualNetworkName=${{ env.virtualNetworkName }}
                  export subnetName=${{ env.subnetName }}
                else
                  export virtualNetworkResourceGroupName=${resourceGroup}
                  export virtualNetworkNewOrExisting="new"
                  export virtualNetworkName="VirtualNetwork"
                  export subnetName="Subnet-1"
                fi

                ## Prepare other parameters
                export gitUserName=${{ github.repository_owner }}
                export testbranchName=${{ github.sha }}
                export storageAccountResourceGroupName=${resourceGroup}
                export jdbcDataSourceJNDIName="java:jboss/datasources/JavaEECafeDB"
                export jdkVersion=${{ inputs.jdkVersion }}
                export gracefulShutdownTimeout="${{ env.gracefulShutdownTimeout }}"
                
                ## generate parameter file 
                parameter_template="./${{ env.offerName }}/src/test/scripts/parameters-template.json"
                parameter_output="./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json"
                envsubst < "$parameter_template" > "$parameter_output"

            - name: Archive parameters-test-${{ env.offerName }}-${{ github.job }}.json
              uses: actions/upload-artifact@v4.6.2
              if: success()
              with:
                name: parameters-test-${{ env.offerName }}-${{ github.job }}
                path: ./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json
            - name: Deploy JBoss EAP ${{ env.offerName }}
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                  az deployment group create \
                  --verbose \
                  --resource-group ${{ env.resourceGroup }} \
                  --name ${{ env.offerName }} \
                  --parameters @./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
                  --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json
            - name: Get public IP
              id: get_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    # Query public IP for later use
                    publicip=$(az network public-ip list --resource-group $resourceGroup --query "[?starts_with(name, 'jbosseapVm-ip')].ipAddress" -o tsv)
                    echo "publicip=${publicip}" >> $GITHUB_OUTPUT

            - name: Verify console is accessible
              uses: ./.github/actions/url-health-check
              with:
                appEndpoint: "http://${{steps.get_public_ip.outputs.publicip}}:9990/console/index.html"
                maxRetries: 10
                retryInterval: 15

    resources-cleanup:
      name: resources-cleanup after ${{ github.event.inputs.timeWaitBeforeDelete }}
      needs:
        - deploy-single
      if: always()
      runs-on: ubuntu-latest
      steps:
        - uses: azure/login@v1
          id: azure-login
          with:
            creds: ${{ env.azureCredentials }}
        - name: Pause ${{ github.event.inputs.timeWaitBeforeDelete }} before deleting resources
          run: |
            echo "Sleeping for ${{ github.event.inputs.timeWaitBeforeDelete }}"
            sleep ${{ github.event.inputs.timeWaitBeforeDelete }}
        - name: Delete Resource Group
          if: always()
          id: delete-resource-group
          run: |
            echo "delete... " $resourceGroup
            az group delete --yes --no-wait --verbose --name $resourceGroup
