name: Get Latest Azure API Versions in Azure-Common.properties

on:
  workflow_dispatch:
    inputs:
      
env:
  azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}

jobs:
  check-api-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: azure/login@v1
        id: azure-login
        with:
          creds: ${{ env.azureCredentials }}
      - name: Get and Update API Versions
        id: update-versions
        run: |
          # Create a temporary file to store the updated content
          cp utilities/azure-common.properties utilities/azure-common.properties.new
          
          # Function to get latest API version
          get_latest_version() {
            local namespace=$1
            local resourceType=$2
            local version=$(az provider show --namespace $namespace \
              --query "resourceTypes[?resourceType=='$resourceType'].apiVersions[0]" \
              | jq -r '.[] | select(test("preview$"; "i") | not)')
            echo $version
          }
          
          echo "Checking for API version updates..."
          echo "----------------------------------------"
          
          # Process each resource type
          while IFS= read -r line; do
            if [[ $line =~ ^#\ ([^/]+)/(.+)$ ]]; then
              namespace="${BASH_REMATCH[1]}"
              resourceType="${BASH_REMATCH[2]}"
              if [[ $line =~ ^#\ ([^/]+)/(.+)$ ]]; then
                # Get the property name from the next line
                read -r next_line
                if [[ $next_line =~ ^azure\.apiVersionFor([^=]+)=(.+)$ ]]; then
                  prop_name="${BASH_REMATCH[1]}"
                  current_version="${BASH_REMATCH[2]}"
                  
                  # Get latest version
                  latest_version=$(get_latest_version "$namespace" "$resourceType")
                  
                  if [ ! -z "$latest_version" ]; then
                    if [ "$current_version" != "$latest_version" ]; then
                      echo "Resource: $namespace/$resourceType"
                      echo "Current version: $current_version"
                      echo "Latest version: $latest_version"
                      echo "----------------------------------------"
                      # Update the version in the new file
                      sed -i "s/azure\.apiVersionFor$prop_name=$current_version/azure\.apiVersionFor$prop_name=$latest_version/" utilities/azure-common.properties.new
                    else
                      echo "Resource: $namespace/$resourceType"
                      echo "Already at latest version: $current_version"
                      echo "----------------------------------------"
                    fi
                  fi
                fi
              fi
            fi
          done < utilities/azure-common.properties
          
          # Show the diff of changes
          echo ""
          echo "Summary of changes:"
          echo "----------------------------------------"
          diff utilities/azure-common.properties utilities/azure-common.properties.new || true
          