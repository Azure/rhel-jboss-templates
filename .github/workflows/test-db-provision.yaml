name: Test db provision
run-name:  Test db provision with `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
        - mssqlserver
        - oracle
        - mysql(flexible)
        - mysql-passwordless(flexible)
        - postgresql(flexible)
        - postgresql-passwordless(flexible)
        - none

env:
    azCliVersion: 2.72.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
    location: eastus2
    domainResourceGroup: multivm-domain-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    standaloneResourceGroup: multivm-standalone-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    dependencyResourceGroup: multivm-dep-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    vmName: ${{ github.run_id }}${{ github.run_number }}vm
    asName: ${{ github.run_id }}${{ github.run_number }}as
    adminUsername: azureadmin
    password: ${{ secrets.VM_PASSWORD }}
    numberOfInstances: 3
    domainOperatingMode: managed-domain
    standaloneOperatingMode: standalone
    cafeappStorageAccountName: ${{ github.run_id }}${{ github.run_number }}cafeappsa
    domainBootStorageAccountName: domainsa
    standaloneBootStorageAccountName: standsa
    dbInstanceName: db${{ github.run_id }}${{ github.run_number }}
    dbPassword: ${{ secrets.DATABASE_PASSWORD }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    jbossEAPUserName: jbossadmin
    jbossEAPPassword: ${{ secrets.JBOSS_EAP_USER_PASSWORD }}
    rhsmUserName: ${{ secrets.RHSM_USERNAME }}
    rhsmPassword: ${{ secrets.RHSM_PASSWORD }}
    rhsmPoolEAP: ${{ secrets.RHSM_POOL }}
    rhsmPoolRHEL: ${{ secrets.RHSM_POOL_FOR_RHEL }}
    gitUserName: ${{ secrets.USER_NAME }}
    domainTestBranchName: domain-cicd-${{ github.run_id }}-${{ github.run_number }}
    standaloneTestBranchName: standalone-cicd-${{ github.run_id }}-${{ github.run_number }}
    gitEmail: ${{ secrets.USER_EMAIL }}
    scriptLocation: https://raw.githubusercontent.com/${{ secrets.USER_NAME }}/rhel-jboss-templates/$GITHUB_REF_NAME/utilities/
    offerName: "eap-rhel-byos-multivm"

jobs:
    preflight:
        outputs:
          artifactName: ${{steps.build.outputs.artifactName}}
        runs-on: ubuntu-latest
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "validate"

    deploy-dependent-resources:
        needs: preflight
        runs-on: ubuntu-latest
        outputs:
          sqlserverHost: ${{ steps.deploy-mssqlserver.outputs.sqlserverHost }}
          oracleHost: ${{ steps.deploy-oracle.outputs.oracleHost }}
          mysqlHost: ${{ steps.deploy-mysql.outputs.mysqlHost }}
          postgresqlHost: ${{ steps.deploy-postgresql.outputs.postgresqlHost }}
          mysqlPasswordlessHost: ${{ steps.deploy-mysql-passwordless.outputs.mysqlHost }}
          postgresqlPasswordlessHost: ${{ steps.deploy-postgresql-passwordless.outputs.postgresqlHost }}
          mysqlUamiId: ${{ steps.deploy-mysql-passwordless.outputs.uamiId }}
          postgresqlUamiId: ${{ steps.deploy-postgresql-passwordless.outputs.uamiId }}
        steps:
            - name: checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              run: |
                az group create -n ${{ env.dependencyResourceGroup}} -l ${{ env.location }}
            - name: provision dabase
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.dependencyResourceGroup }}
                uamiName: ${{ env.uamiName }}
                location: ${{ env.location }}
                dbInstanceName: ${{ env.dbInstanceName }}
                dbPassword: ${{ env.dbPassword }}
