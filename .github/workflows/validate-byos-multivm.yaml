name: Validate byos-multivm offer
run-name: Validate byos-multivm offer with `jdk`:${{ inputs.jdkVersion }} and `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
        - mssqlserver
        - mssqlserver-passwordless
        - oracle
        - mysql(flexible)
        - mysql-passwordless(flexible)
        - postgresql(flexible)
        - postgresql-passwordless(flexible)
        - none
      jdkVersion:
        description: 'jdkVersion'
        required: true
        default: 'eap8-openjdk17'
        type: choice
        options:
          - eap8-openjdk17
          - eap8-openjdk11
          - eap74-openjdk17
          - eap74-openjdk11
          - eap74-openjdk8
      timeWaitBeforeDelete:
        description: 'Choose the wait time before deleting resources: 30m (30 minutes), 2h (2 hours), 5h (5 hours), 0 (immediately)'
        required: true
        type: choice
        default: 0
        options:
          - 30m
          - 2h
          - 5h
          - 0
      configurations_for_ci:
        description: "JSON string of environment variables used for CI"
        required: false
        default: '{}'

env:
    azCliVersion: 2.72.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
    location: eastus2
    domainResourceGroup: multivm-domain-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    standaloneResourceGroup: multivm-standalone-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    dependencyResourceGroup: multivm-dep-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    vmName: ${{ github.run_id }}${{ github.run_number }}vm
    asName: ${{ github.run_id }}${{ github.run_number }}as
    adminUsername: azureadmin
    password: ${{ secrets.VM_PASSWORD }}
    numberOfInstances: 3
    domainOperatingMode: managed-domain
    standaloneOperatingMode: standalone
    cafeappStorageAccountName: ${{ github.run_id }}${{ github.run_number }}cafeappsa
    domainBootStorageAccountName: domainsa
    standaloneBootStorageAccountName: standsa
    dbInstanceName: db${{ github.run_id }}${{ github.run_number }}
    dbPassword: ${{ secrets.DATABASE_PASSWORD }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    jbossEAPUserName: jbossadmin
    jbossEAPPassword: ${{ secrets.JBOSS_EAP_USER_PASSWORD }}
    rhsmUserName: ${{ secrets.RHSM_USERNAME }}
    rhsmPassword: ${{ secrets.RHSM_PASSWORD }}
    rhsmPoolEAP: ${{ secrets.RHSM_POOL }}
    rhsmPoolRHEL: ${{ secrets.RHSM_POOL_FOR_RHEL }}
    gitEmail: ${{ secrets.USER_EMAIL }}
    scriptLocation: https://raw.githubusercontent.com/${{ github.repository_owner }}/rhel-jboss-templates/$GITHUB_REF_NAME/utilities/
    offerName: "eap-rhel-byos-multivm"
    gracefulShutdownTimeout: "-1"

jobs:
    preflight:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "validate"

    create-all-resource-groups:
        needs: preflight
        runs-on: ubuntu-latest
        steps:
          - name: Checkout rhel-jboss-templates
            uses: actions/checkout@v4
          - uses: azure/login@v1
            id: azure-login
            with:
              creds: ${{ env.azureCredentials }}
          - name: Create Dependent Resource Group
            run: |
              az group create -n ${{ env.dependencyResourceGroup }} -l ${{ env.location }}
          - name: Create Domain Resource Group
            run: |
              az group create -n ${{ env.domainResourceGroup }} -l ${{ env.location }}
          - name: Create Standalone Resource Group
            run: |
              az group create -n ${{ env.standaloneResourceGroup }} -l ${{ env.location }}

    deploy-resources:
        needs: create-all-resource-groups
        runs-on: ubuntu-latest
        outputs:
          uamiId: ${{ steps.database-provision.outputs.uamiId }}
          serverHost: ${{ steps.database-provision.outputs.serverHost }}
        steps:
            - name: Export environment variables for resourceGroup
              run: |
                echo "resourceGroup=${{ env.dependencyResourceGroup }}" >> $GITHUB_ENV
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Provision database
              id: database-provision
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.resourceGroup }}
                uamiName: ${{ env.uamiName }}
                location: ${{ env.location }}
                dbInstanceName: ${{ env.dbInstanceName }}
                dbPassword: ${{ env.dbPassword }}

    deploy-multivm-domain:
        needs: 
          - preflight
          - deploy-resources
        runs-on: ubuntu-latest
        steps:
            - name: Export environment variables for resourceGroup
              run: |
                echo "resourceGroup=${{ env.domainResourceGroup }}" >> $GITHUB_ENV
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "build"
                uploadArtifact: false
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Accept Image Terms
              id: accept-terms
              run: |
                  echo "accept terms for VM image"
                  az vm image terms accept --urn redhat:rh-jboss-eap:rh-jboss-eap74-rhel8:latest

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ needs.deploy-resources.outputs.uamiId }}
                serverHost: ${{ needs.deploy-resources.outputs.serverHost }}
                dbInstanceName: ${{ env.dbInstanceName }}

            - name: Prepare parameter file
              run: |
                databaseType=${{ steps.database-parameters.outputs.databaseType }}
                enableDB=${{ steps.database-parameters.outputs.enableDB }}
                enablePasswordless=${{ steps.database-parameters.outputs.enablePasswordless }}
                dbUser=${{ steps.database-parameters.outputs.dbUser }}
                dbPassword=${{ env.dbPassword }}
                dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}
                dbIdentity='${{ steps.database-parameters.outputs.dbIdentity }}'

                echo "generate parameter file for domain mode"
                # Generate parameters for db template deployment
                bash ./${{ env.offerName }}/src/test/scripts/gen-parameters.sh \
                <<< "./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
                ${{ github.repository_owner }} \
                ${{ github.sha }} \
                ${location} \
                ${vmName} \
                ${asName} \
                ${adminUsername} \
                ${password} \
                ${numberOfInstances} \
                ${domainOperatingMode} \
                ${resourceGroup} \
                ${domainBootStorageAccountName} \
                ${resourceGroup} \
                ${jbossEAPUserName} \
                ${jbossEAPPassword} \
                ${rhsmUserName} \
                ${rhsmPassword} \
                ${rhsmPoolEAP} \
                ${rhsmPoolRHEL} \
                ${enableDB} \
                ${databaseType} \
                java:jboss/datasources/JavaEECafeDB \
                ${dsConnectionURL} \
                ${dbUser} \
                ${dbPassword} \
                ${{ inputs.jdkVersion }} \
                ${{ env.gracefulShutdownTimeout }} \
                ${enablePasswordless} \
                ${dbIdentity}"

            - name: Archive parameters-test-${{ env.offerName }}-${{ github.job }}.json
              uses: actions/upload-artifact@v4.6.2
              if: success()
              with:
                name: parameters-test-${{ env.offerName }}-${{ github.job }}
                path: ./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json
            - name: Deploy JBoss EAP ${{ env.offerName }}
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.resourceGroup }} \
                    --name ${{ env.offerName }} \
                    --parameters @./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
                    --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json
            - name: Build and upload javaee cafe
              id: build-and-upload-javaee-cafe
              uses: ./.github/actions/build-and-upload-javaee-cafe
              with:
                jdkVersion: ${{ inputs.jdkVersion }}
                storageAccountName: ${{ env.cafeappStorageAccountName }}
                resourceGroup: ${{ env.resourceGroup }}
                location: ${{ env.location }}
                enableDB: ${{ env.enableDB }}
            - name: Query public ip of admin VM
              id: query_admin_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    # query public ip address of admin VM
                    publicip=$(az network public-ip list --resource-group ${{ env.resourceGroup }} --query "[?ends_with(name, '-adminVM-pubIp')].ipAddress" -o tsv)
                    
                    echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"
            - name: Deploy cafe application
              run: |
                appbloburl="${{steps.build-and-upload-javaee-cafe.outputs.appbloburl}}"
                echo "appbloburl: " $appbloburl

                publicip=${{steps.query_admin_public_ip.outputs.publicip}}
                echo "publicip: " $publicip

                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"add\", \"address\" : {\"deployment\" : \"javaee-cafe.war\"}, \"content\" : [{\"url\" : \"${appbloburl}\"}],\"json.pretty\":1}"
                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"add\", \"address\" : {\"server-group\" : \"main-server-group\",\"deployment\":\"javaee-cafe.war\"},\"json.pretty\":1}"
                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"deploy\", \"address\" : {\"server-group\" : \"main-server-group\",\"deployment\":\"javaee-cafe.war\"},\"json.pretty\":1}"
            - name: Query public ip of Application Gateway
              id: query_app_gateway_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                  # query public ip address of Application Gateway
                  publicip=$(az network public-ip list --resource-group $resourceGroup --query "[?starts_with(name, 'gwip')].ipAddress" -o tsv)
                  echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"

            - name: Verify cafe application is accessible
              uses: ./.github/actions/url-health-check
              with:
                appEndpoint: "http://${{steps.query_app_gateway_public_ip.outputs.publicip}}/javaee-cafe/"
                maxRetries: 10
                retryInterval: 15

            - name: Verify eap-session-replication application is accessible
              uses: ./.github/actions/url-health-check
              with:
                appEndpoint: "http://${{steps.query_app_gateway_public_ip.outputs.publicip}}/eap-session-replication/"
                maxRetries: 10
                retryInterval: 15

    deploy-multivm-standalone:
        needs: 
          - preflight
          - deploy-resources
        runs-on: ubuntu-latest
        steps:
            - name: Export environment variables for resourceGroup
              run: |
                echo "resourceGroup=${{ env.standaloneResourceGroup }}" >> $GITHUB_ENV
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "build"
                uploadArtifact: false
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Accept Image Terms
              id: accept-terms
              run: |
                  echo "accept terms for VM image"
                  az vm image terms accept --urn redhat:rh-jboss-eap:rh-jboss-eap74-rhel8:latest

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ needs.deploy-resources.outputs.uamiId }}
                serverHost: ${{ needs.deploy-resources.outputs.serverHost }}
                dbInstanceName: ${{ env.dbInstanceName }}

            - name: Prepare parameter file
              run: |
                databaseType=${{ steps.database-parameters.outputs.databaseType }}
                enableDB=${{ steps.database-parameters.outputs.enableDB }}
                enablePasswordless=${{ steps.database-parameters.outputs.enablePasswordless }}
                dbUser=${{ steps.database-parameters.outputs.dbUser }}
                dbPassword=${{ env.dbPassword }}
                dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}
                dbIdentity='${{ steps.database-parameters.outputs.dbIdentity }}'

                echo "generate parameter file for standalone mode"
                bash ./${{ env.offerName }}/src/test/scripts/gen-parameters.sh \
                <<< "./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
                ${{ github.repository_owner }} \
                ${{ github.sha }} \
                ${location} \
                ${vmName} \
                ${asName} \
                ${adminUsername} \
                ${password} \
                ${numberOfInstances} \
                ${standaloneOperatingMode} \
                ${resourceGroup} \
                ${standaloneBootStorageAccountName} \
                ${resourceGroup} \
                ${jbossEAPUserName} \
                ${jbossEAPPassword} \
                ${rhsmUserName} \
                ${rhsmPassword} \
                ${rhsmPoolEAP} \
                ${rhsmPoolRHEL} \
                ${enableDB} \
                ${databaseType} \
                java:jboss/datasources/JavaEECafeDB \
                ${dsConnectionURL} \
                ${dbUser} \
                ${dbPassword} \
                ${{ inputs.jdkVersion }} \
                ${{ env.gracefulShutdownTimeout }} \
                ${enablePasswordless} \
                ${dbIdentity}"

            - name: Archive parameters-test-${{ env.offerName }}-${{ github.job }}.json
              uses: actions/upload-artifact@v4.6.2
              if: success()
              with:
                name: parameters-test-${{ env.offerName }}-${{ github.job }}
                path: ./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json

            - name: Deploy JBoss EAP ${{ env.offerName }}
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                  az deployment group create \
                  --verbose \
                  --resource-group ${{ env.resourceGroup }} \
                  --name ${{ env.offerName }} \
                  --parameters @./${{ env.offerName }}/src/test/parameters-test-${{ env.offerName }}-${{ github.job }}.json \
                  --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json
            - name: Query public ip of Application Gateway
              id: query_app_gateway_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    # query public ip address of Application Gateway
                    publicip=$(az network public-ip list --resource-group $resourceGroup --query "[?starts_with(name, 'gwip')].ipAddress" -o tsv)
                    echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"
            - name: Verify eap-session-replication application is accessible
              uses: ./.github/actions/url-health-check
              with:
                appEndpoint: "http://${{steps.query_app_gateway_public_ip.outputs.publicip}}/eap-session-replication/"
                maxRetries: 10
                retryInterval: 15

    resources-cleanup:
      name: resources-cleanup after ${{ github.event.inputs.timeWaitBeforeDelete }}
      needs:
        - preflight
        - deploy-resources
        - deploy-multivm-domain
        - deploy-multivm-standalone
      if: always()
      runs-on: ubuntu-latest
      steps:
        - uses: azure/login@v1
          id: azure-login
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
        - name: Pause ${{ github.event.inputs.timeWaitBeforeDelete }} before deleting resources
          run: |
            echo "Sleeping for ${{ github.event.inputs.timeWaitBeforeDelete }}"
            sleep ${{ github.event.inputs.timeWaitBeforeDelete }}
        - name: Delete Dependent Resource Group
          if: always()
          run: |
            az group delete --yes --no-wait --name ${{ env.dependencyResourceGroup }}
        - name: Delete Standalone Resource Group
          if: always()
          id: delete-standalone-resource-group
          run: |
            echo "delete... " $standaloneResourceGroup
            az group delete --yes --no-wait --verbose --name ${{ env.standaloneResourceGroup }}
        - name: Delete Domain Resource Group
          if: always()
          id: delete-domain-resource-group
          run: |
            echo "delete... " $domainResourceGroup
            az group delete --yes --no-wait --verbose --name ${{ env.domainResourceGroup }}
