name: Validate byos-multivm offer
run-name: Validate byos-multivm offer with `jdk`:${{ inputs.jdkVersion }} and `db`:${{ inputs.databaseType }}

on:
  workflow_dispatch:
    inputs:
      databaseType:
        description: 'Database connection'
        required: true
        default: 'mssqlserver'
        type: choice
        options:
        - mssqlserver
        - oracle
        - mysql(flexible)
        - mysql-passwordless(flexible)
        - postgresql(flexible)
        - postgresql-passwordless(flexible)
        - none
      jdkVersion:
        description: 'jdkVersion'
        required: true
        default: 'eap8-openjdk17'
        type: choice
        options:
          - eap8-openjdk17
          - eap8-openjdk11
          - eap74-openjdk17
          - eap74-openjdk11
          - eap74-openjdk8
      timeWaitBeforeDelete:
        description: 'Choose the wait time before deleting resources: 30m (30 minutes), 2h (2 hours), 5h (5 hours), 0 (immediately)'
        required: true
        type: choice
        default: 0
        options:
          - 30m
          - 2h
          - 5h
          - 0

env:
    azCliVersion: 2.72.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
    location: eastus2
    domainResourceGroup: multivm-domain-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    standaloneResourceGroup: multivm-standalone-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    dependencyResourceGroup: multivm-dep-${{ github.repository_owner }}-${{ github.run_id }}-${{ github.run_number }}
    vmName: ${{ github.run_id }}${{ github.run_number }}vm
    asName: ${{ github.run_id }}${{ github.run_number }}as
    adminUsername: azureadmin
    password: ${{ secrets.VM_PASSWORD }}
    numberOfInstances: 3
    domainOperatingMode: managed-domain
    standaloneOperatingMode: standalone
    cafeappStorageAccountName: ${{ github.run_id }}${{ github.run_number }}cafeappsa
    domainBootStorageAccountName: domainsa
    standaloneBootStorageAccountName: standsa
    dbInstanceName: db${{ github.run_id }}${{ github.run_number }}
    dbPassword: ${{ secrets.DATABASE_PASSWORD }}
    uamiName: uami${{ github.run_id }}${{ github.run_number }}
    jbossEAPUserName: jbossadmin
    jbossEAPPassword: ${{ secrets.JBOSS_EAP_USER_PASSWORD }}
    rhsmUserName: ${{ secrets.RHSM_USERNAME }}
    rhsmPassword: ${{ secrets.RHSM_PASSWORD }}
    rhsmPoolEAP: ${{ secrets.RHSM_POOL }}
    rhsmPoolRHEL: ${{ secrets.RHSM_POOL_FOR_RHEL }}
    gitEmail: ${{ secrets.USER_EMAIL }}
    scriptLocation: https://raw.githubusercontent.com/${{ github.repository_owner }}/rhel-jboss-templates/$GITHUB_REF_NAME/utilities/
    offerName: "eap-rhel-byos-multivm"
    gracefulShutdownTimeout: "-1"

jobs:
    preflight:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "validate"

    deploy-dependent-resources:
        needs: preflight
        runs-on: ubuntu-latest
        outputs:
          uamiId: ${{ steps.dabase-provision.outputs.uamiId }}
          serverHost: ${{ steps.dabase-provision.outputs.serverHost }}
        steps:
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Create Resource Group
              run: |
                az group create -n ${{ env.dependencyResourceGroup}} -l ${{ env.location }}
            - name: Provision dabase
              id: dabase-provision
              uses: ./.github/actions/database-provision
              with:
                databaseType: ${{ inputs.databaseType }}
                resourceGroup: ${{ env.dependencyResourceGroup }}
                uamiName: ${{ env.uamiName }}
                location: ${{ env.location }}
                dbInstanceName: ${{ env.dbInstanceName }}
                dbPassword: ${{ env.dbPassword }}

    deploy-multivm-domain:
        needs: 
          - preflight
          - deploy-dependent-resources
        runs-on: ubuntu-latest
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "build"
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Accept Image Terms
              id: accept-terms
              run: |
                  echo "accept terms for VM image"
                  az vm image terms accept --urn redhat:rh-jboss-eap:rh-jboss-eap74-rhel8:latest

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ needs.deploy-dependent-resources.outputs.uamiId }}
                serverHost: ${{ needs.deploy-dependent-resources.outputs.serverHost }}
                dbInstanceName: ${{ env.dbInstanceName }}

            - name: Prepare parameter file
              run: |
                databaseType=${{ steps.database-parameters.outputs.databaseType }}
                enableDB=${{ steps.database-parameters.outputs.enableDB }}
                enablePasswordless=${{ steps.database-parameters.outputs.enablePasswordless }}
                dbUser=${{ steps.database-parameters.outputs.dbUser }}
                dbPassword=${{ env.dbPassword }}
                dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}
                dbIdentity=${{ steps.database-parameters.outputs.dbIdentity }}

                echo "generate parameter file for domain mode"
                # Generate parameters for db template deployment
                bash ./${{ env.offerName }}/src/test/scripts/gen-parameters.sh \
                <<< "./${{ env.offerName }}/src/test/parameters-test-domain.json \
                ${{ github.repository_owner }} \
                ${{ github.sha }} \
                ${location} \
                ${vmName} \
                ${asName} \
                ${adminUsername} \
                ${password} \
                ${numberOfInstances} \
                ${domainOperatingMode} \
                ${domainResourceGroup} \
                ${domainBootStorageAccountName} \
                ${domainResourceGroup} \
                ${jbossEAPUserName} \
                ${jbossEAPPassword} \
                ${rhsmUserName} \
                ${rhsmPassword} \
                ${rhsmPoolEAP} \
                ${rhsmPoolRHEL} \
                ${enableDB} \
                ${databaseType} \
                java:jboss/datasources/JavaEECafeDB \
                ${dsConnectionURL} \
                ${dbUser} \
                ${dbPassword} \
                ${{ inputs.jdkVersion }} \
                ${{ env.gracefulShutdownTimeout }} \
                ${enablePasswordless} \
                ${dbIdentity}"

            - name: Archive parameters-test-domain.json
              uses: actions/upload-artifact@v4.6.2
              if: success()
              with:
                name: parameters-test-domain
                path: ./${{ env.offerName }}/src/test/parameters-test-domain.json
            - name: Create Resource Group
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.domainResourceGroup }}
                    az group create --verbose --name ${{ env.domainResourceGroup }} --location ${{ env.location }}
            - name: Deploy JBoss EAP domain cluster
              id: deploy-multivm-managed-domain
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.domainResourceGroup }} \
                    --name multivm-managed-domain \
                    --parameters @./${{ env.offerName }}/src/test/parameters-test-domain.json \
                    --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json
            - name: Build javaee cafe
              run: |
                if [[ "${{ inputs.jdkVersion }}" == "eap8-openjdk17" || "${{ inputs.jdkVersion }}" == "eap8-openjdk11" ]]; then
                  git clone https://github.com/Azure/rhel-jboss-templates.git --branch 20240924 --single-branch rhel-jboss-templates-to-build
                else
                  git clone https://github.com/Azure/rhel-jboss-templates.git --branch 20240904 --single-branch rhel-jboss-templates-to-build
                fi
                if ${{ env.enableDB != 'true' }}; then
                  sed -i "s/java:jboss\/datasources\/JavaEECafeDB/java:jboss\/datasources\/ExampleDS/g" rhel-jboss-templates-to-build/eap-coffee-app/src/main/resources/META-INF/persistence.xml
                fi
                mvn clean install --file rhel-jboss-templates-to-build/eap-coffee-app/pom.xml

            - name: Create a container and uploading cafe app
              id: upload_cafe_app
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                  az storage account create \
                    --name ${{ env.cafeappStorageAccountName }} \
                    --resource-group ${{ env.domainResourceGroup }} \
                    --location ${{ env.location }} \
                    --sku "Standard_LRS" 
                  # create a container
                  az storage container create --name cafeapp --account-name ${{ env.cafeappStorageAccountName }}
                  # upload cafe app
                  az storage blob upload \
                    --account-name ${{ env.cafeappStorageAccountName }} \
                    --container-name cafeapp \
                    --name javaee-cafe.war \
                    --file rhel-jboss-templates-to-build/eap-coffee-app/target/javaee-cafe.war
                  
                  # query the app url
                  sasTokenValidTime=3600
                  expiryData=$(( `date +%s`+${sasTokenValidTime}))
                  sasEnd=`date -d@"$expiryData" -u '+%Y-%m-%dT%H:%MZ'`
                  sasToken=$(az storage account generate-sas \
                      --permissions r \
                      --account-name ${{ env.cafeappStorageAccountName }} \
                      --services b \
                      --resource-types sco \
                      --expiry $sasEnd  -o tsv)
                  appbloburl=$(az storage blob url \
                      --container-name cafeapp \
                      --name javaee-cafe.war \
                      --account-name ${{ env.cafeappStorageAccountName }} \
                      --sas-token ${sasToken} -o tsv) 
                  echo "appbloburl=${appbloburl}" >> "$GITHUB_OUTPUT"

            - name: Query public ip of admin VM
              id: query_admin_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    # query public ip address of admin VM
                    publicip=$(az network public-ip list --resource-group ${{ env.domainResourceGroup }} --query "[?ends_with(name, '-adminVM-pubIp')].ipAddress" -o tsv)
                    
                    echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"
            - name: Deploy cafe application
              run: |
                appbloburl="${{steps.upload_cafe_app.outputs.appbloburl}}"
                echo "appbloburl: " $appbloburl

                publicip=${{steps.query_admin_public_ip.outputs.publicip}}
                echo "publicip: " $publicip

                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"add\", \"address\" : {\"deployment\" : \"javaee-cafe.war\"}, \"content\" : [{\"url\" : \"${appbloburl}\"}],\"json.pretty\":1}"
                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"add\", \"address\" : {\"server-group\" : \"main-server-group\",\"deployment\":\"javaee-cafe.war\"},\"json.pretty\":1}"
                curl --digest -L -D - http://${publicip}:9990/management --header "Content-Type: application/json" -u ${jbossEAPUserName}:${jbossEAPPassword} -d "{\"operation\" : \"deploy\", \"address\" : {\"server-group\" : \"main-server-group\",\"deployment\":\"javaee-cafe.war\"},\"json.pretty\":1}"
            - name: Query public ip of Application Gateway
              id: query_app_gateway_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                  # query public ip address of Application Gateway
                  publicip=$(az network public-ip list --resource-group $domainResourceGroup --query "[?starts_with(name, 'gwip')].ipAddress" -o tsv)
                  
                  echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"
            - name: Verify cafe application
              run: |
                publicip=${{steps.query_app_gateway_public_ip.outputs.publicip}}
                echo "publicip: " $publicip
                CURL_RETRY_PARMS="--connect-timeout 60 --max-time 180 --retry 10 --retry-delay 30 --retry-max-time 180 --retry-connrefused"

                echo "Verifying Cafe is deployed as expected"
                curl --verbose http://${publicip}/javaee-cafe/
                response=$(curl ${CURL_RETRY_PARMS}  --write-out '%{http_code}' --silent --output /dev/null http://${publicip}/javaee-cafe/)
                echo "$response"
                if [ "$response" -ne 200 ]; then
                  echo "Cafe is not accessible"
                  exit 1
                else
                  echo "Cafe is accessible"
                fi
                exit 0
            - name: Verify eap-session-replication application
              run: |
                publicip=${{steps.query_app_gateway_public_ip.outputs.publicip}}
                echo "publicip: " $publicip
                CURL_RETRY_PARMS="--connect-timeout 60 --max-time 180 --retry 10 --retry-delay 30 --retry-max-time 180 --retry-connrefused"

                echo "Verifying eap-session-replication is deployed as expected"
                curl --verbose http://${publicip}/eap-session-replication/
                response=$(curl ${CURL_RETRY_PARMS}  --write-out '%{http_code}' --silent --output /dev/null http://${publicip}/eap-session-replication/)
                echo "$response"
                if [ "$response" -ne 200 ]; then
                  echo "eap-session-replication is not accessible"
                  exit 1
                else
                  echo "eap-session-replication is accessible"
                fi
                exit 0         

    deploy-multivm-standalone:
        needs: 
          - preflight
          - deploy-dependent-resources
        runs-on: ubuntu-latest
        steps:
            - name: Checkout rhel-jboss-templates
              uses: actions/checkout@v4
            - name: build
              id: build
              uses: ./.github/actions/build
              with:
                offerName: ${{ env.offerName }}
                token: ${{ secrets.GITHUB_TOKEN }}
                workflowType: "build"
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Accept Image Terms
              id: accept-terms
              run: |
                  echo "accept terms for VM image"
                  az vm image terms accept --urn redhat:rh-jboss-eap:rh-jboss-eap74-rhel8:latest

            - name: Get database parameters
              id: database-parameters
              uses: ./.github/actions/database-parameters
              with:
                databaseType: ${{ inputs.databaseType }}
                uamiId: ${{ needs.deploy-dependent-resources.outputs.uamiId }}
                serverHost: ${{ needs.deploy-dependent-resources.outputs.serverHost }}
                dbInstanceName: ${{ env.dbInstanceName }}

            - name: Prepare parameter file
              run: |
                databaseType=${{ steps.database-parameters.outputs.databaseType }}
                enableDB=${{ steps.database-parameters.outputs.enableDB }}
                enablePasswordless=${{ steps.database-parameters.outputs.enablePasswordless }}
                dbUser=${{ steps.database-parameters.outputs.dbUser }}
                dbPassword=${{ env.dbPassword }}
                dsConnectionURL=${{ steps.database-parameters.outputs.dsConnectionURL }}
                dbIdentity=${{ steps.database-parameters.outputs.dbIdentity }}

                echo "generate parameter file for standalone mode"
                bash ./${{ env.offerName }}/src/test/scripts/gen-parameters.sh \
                <<< ./${{ env.offerName }}/src/test/parameters-test-standalone.json  \
                ${{ github.repository_owner }} \
                ${{ github.sha }} \
                ${location} \
                ${vmName} \
                ${asName} \
                ${adminUsername} \
                ${password} \
                ${numberOfInstances} \
                ${standaloneOperatingMode} \
                ${standaloneResourceGroup} \
                ${standaloneBootStorageAccountName} \
                ${standaloneResourceGroup} \
                ${jbossEAPUserName} \
                ${jbossEAPPassword} \
                ${rhsmUserName} \
                ${rhsmPassword} \
                ${rhsmPoolEAP} \
                ${rhsmPoolRHEL} \
                ${enableDB} \
                ${databaseType} \
                java:jboss/datasources/JavaEECafeDB \
                ${dsConnectionURL} \
                ${dbUser} \
                ${dbPassword} \
                ${{ inputs.jdkVersion }} \
                ${{ env.gracefulShutdownTimeout }} \
                ${enablePasswordless} \
                ${dbIdentity}"

            - name: Archive parameters-test-standalone.json
              uses: actions/upload-artifact@v4.6.2
              if: success()
              with:
                name: parameters-test-standalone
                path: ./${{ env.offerName }}/src/test/parameters-test-standalone.json
            - name: Create Resource Group
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.standaloneResourceGroup }}
                    az group create --verbose --name ${{ env.standaloneResourceGroup }} --location ${{ env.location }}
            - name: Deploy JBoss EAP standalone cluster
              id: deploy-multivm-managed-standalone
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.standaloneResourceGroup }} \
                    --name multivm-standalone \
                    --parameters @./${{ env.offerName }}/src/test/parameters-test-single.json \
                    --template-file ./${{ env.offerName }}/target/arm/mainTemplate.json
            - name: Query public ip of Application Gateway
              id: query_app_gateway_public_ip
              uses: azure/cli@v2
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    # query public ip address of Application Gateway
                    publicip=$(az network public-ip list --resource-group $standaloneResourceGroup --query "[?starts_with(name, 'gwip')].ipAddress" -o tsv)
                    echo "publicip=${publicip}" >> "$GITHUB_OUTPUT"
            - name: Verify eap-session-replication application
              run: |
                publicip=${{steps.query_app_gateway_public_ip.outputs.publicip}}
                echo "publicip: " $publicip
                CURL_RETRY_PARMS="--connect-timeout 60 --max-time 180 --retry 10 --retry-delay 30 --retry-max-time 180 --retry-connrefused"

                echo "Verifying eap-session-replication is deployed as expected"
                curl --verbose http://${publicip}/eap-session-replication/
                response=$(curl ${CURL_RETRY_PARMS}  --write-out '%{http_code}' --silent --output /dev/null http://${publicip}/eap-session-replication/)
                echo "$response"
                if [ "$response" -ne 200 ]; then
                  echo "eap-session-replication is not accessible"
                  exit 1
                else
                  echo "eap-session-replication is accessible"
                fi
                exit 0

    resources-cleanup:
      name: resources-cleanup after ${{ github.event.inputs.timeWaitBeforeDelete }}
      needs:
        - preflight
        - deploy-dependent-resources
        - deploy-multivm-domain
        - deploy-multivm-standalone
      if: always()
      runs-on: ubuntu-latest
      steps:
        - uses: azure/login@v1
          id: azure-login
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS_BYOS }}
        - name: Pause ${{ github.event.inputs.timeWaitBeforeDelete }} before deleting resources
          run: |
            echo "Sleeping for ${{ github.event.inputs.timeWaitBeforeDelete }}"
            sleep ${{ github.event.inputs.timeWaitBeforeDelete }}
        - name: Delete Dependent Resource Group
          if: ${{ github.event_name == 'workflow_dispatch' }}
          run: |
            az group delete --yes --no-wait --name ${{ env.dependencyResourceGroup }}
        - name: Delete Standalone Resource Group
          if: ${{ github.event_name == 'workflow_dispatch' }}
          id: delete-standalone-resource-group
          run: |
            echo "delete... " $standaloneResourceGroup
            az group delete --yes --no-wait --verbose --name $standaloneResourceGroup
        - name: Delete Domain Resource Group
          if: ${{ github.event_name == 'workflow_dispatch' }}
          id: delete-domain-resource-group
          run: |
            echo "delete... " $domainResourceGroup
            az group delete --yes --no-wait --verbose --name $domainResourceGroup
