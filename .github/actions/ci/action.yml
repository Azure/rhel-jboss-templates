name: 'CI Validation Workflows'
description: 'Execute validation workflows based on a validation plan'
inputs:
  ci_file:
    description: 'Path to the validation plan file'
    required: true
  github_token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}

outputs:
  results:
    description: 'JSON string containing the results of all workflow executions'
    value: ${{ steps.collect-results.outputs.results }}
  report_timestamp:
    description: 'Timestamp of the generated report'
    value: ${{ steps.generate-report.outputs.timestamp }}
  report_url:
    description: 'URL to the generated report'
    value: ${{ steps.output-urls.outputs.report_url }}

runs:
  using: 'composite'
  steps:
    - name: Read validation plan
      id: set-matrix
      shell: bash
      run: |
        PLAN_FILE="${{ inputs.ci_file }}"
        echo "Looking for plan file: $PLAN_FILE"
        
        if [ ! -f "$PLAN_FILE" ]; then
          echo "Error: Plan file $PLAN_FILE not found"
          echo "Current working directory: $(pwd)"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "Listing current directory:"
          ls -la
          exit 1
        fi
        
        echo "Successfully found plan file: $PLAN_FILE"
        
        # Create matrix from plan
        MATRIX=$(jq -c '.validation_scenarios | map({
          workflow: .workflow,
          run_mode: (.run_mode // "parallel"),
          scenarios: .scenarios
        })' "$PLAN_FILE")
        
        echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

    - name: Execute validation workflows
      id: execute-workflows
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        script: |
          const matrix = ${{ steps.set-matrix.outputs.matrix }};
          const allWorkflowRuns = [];
          
          for (const item of matrix) {
            const workflow = item.workflow;
            const runMode = item.run_mode;
            const scenarios = item.scenarios;
            const workflowRuns = [];
            
            console.log(`Starting to trigger workflow: ${workflow}`);
            console.log(`Run mode: ${runMode}`);
            console.log(`Number of scenarios to process: ${scenarios.length}`);
            console.log(`Current owner: ${context.repo.owner}`);
            console.log(`Current repo: ${context.repo.repo}`);
            
            if (runMode === 'serial') {
              console.log('Running scenarios in serial mode');
              
              for (const scenario of scenarios) {
                try {
                  const scenarioName = scenario.scenario;
                  const scenarioInputs = scenario.inputs;
                  
                  console.log(`Triggering ${workflow} with scenario "${scenarioName}":`, JSON.stringify(scenarioInputs, null, 2));
                  
                  // The github rest api for workflow dispatch requires all inputs to be strings.
                  // We need to convert any object values to JSON strings.
                  const inputs = Object.fromEntries(
                    Object.entries(scenarioInputs).map(([key, value]) => {
                      if (typeof value === 'object' && value !== null) {
                        return [key, JSON.stringify(value)];
                      }
                      return [key, value];
                    })
                  );

                  // Trigger the workflow
                  const dispatchResponse = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflow,
                    ref: context.ref,
                    inputs: inputs
                  });
                  
                  console.log(`Workflow dispatch response:`, JSON.stringify(dispatchResponse.data, null, 2));
                  
                  // Wait for 5 seconds for the workflow to be created
                  console.log('Waiting 5 seconds for workflow to be created...');
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  
                  // Get the latest workflow run
                  let attempts = 0;
                  const maxAttempts = 5;
                  let run = null;
                  
                  while (attempts < maxAttempts) {
                    console.log(`Attempt ${attempts + 1} to find workflow run...`);
                    const runs = await github.rest.actions.listWorkflowRuns({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      workflow_id: workflow
                    });
                    
                    if (runs.data.workflow_runs && runs.data.workflow_runs.length > 0) {
                      const potentialRun = runs.data.workflow_runs[0];
                      // Get detailed run information
                      const runDetails = await github.rest.actions.getWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: potentialRun.id
                      });
                      
                      console.log(`Found workflow run:`, JSON.stringify({
                        id: runDetails.data.id,
                        status: runDetails.data.status,
                        created_at: runDetails.data.created_at,
                        head_branch: runDetails.data.head_branch,
                        html_url: runDetails.data.html_url
                      }, null, 2));
                      
                      run = runDetails.data;
                      break;
                    }
                    
                    console.log('No matching workflow run found, waiting 5 seconds...');
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    attempts++;
                  }
                  
                  if (!run) {
                    console.log('Failed to find workflow run after all attempts');
                    continue;
                  }
                  
                  // Wait for this workflow to complete before triggering the next one
                  console.log(`Waiting for workflow run ${run.id} to complete...`);
                  let status = run.status;
                  let waitAttempts = 0;
                  const maxWaitAttempts = 90; // 90 minutes maximum wait time
                  
                  while (status !== 'completed' && waitAttempts < maxWaitAttempts) {
                    // Wait for 60 seconds between checks
                    await new Promise(resolve => setTimeout(resolve, 60000));
                    
                    // Get the workflow run status
                    const runData = await github.rest.actions.getWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id
                    });
                    
                    status = runData.data.status;
                    console.log(`Workflow ${workflow} status: ${status} (wait attempt ${waitAttempts + 1}/${maxWaitAttempts})`);
                    
                    // If the workflow is still queued or in progress, continue waiting
                    if (status === 'queued' || status === 'in_progress') {
                      waitAttempts++;
                      continue;
                    }
                    
                    // If the workflow is completed, break the loop
                    if (status === 'completed') {
                      console.log(`Workflow ${workflow} completed with conclusion: ${runData.data.conclusion}`);
                      break;
                    }
                    
                    // If we get here, the status is something unexpected
                    console.log(`Unexpected status for workflow ${workflow}: ${status}`);
                    waitAttempts++;
                  }
                  
                  if (status !== 'completed') {
                    console.log(`Workflow ${workflow} did not complete within the maximum wait time. Moving to next scenario.`);
                  }
                  
                  workflowRuns.push({
                    workflow: workflow,
                    scenario: scenarioInputs,
                    scenarioName: scenarioName,
                    runId: run.id,
                    runUrl: run.html_url,
                    startTime: run.created_at
                  });
                  
                  console.log(`Successfully processed workflow run: ${run.id}`);
                } catch (error) {
                  console.error(`Error processing scenario:`, error);
                  console.error(`Error details:`, JSON.stringify(error, null, 2));
                }
              }
            } else {
              console.log('Running scenarios in parallel mode');
              
              for (const scenario of scenarios) {
                try {
                  const scenarioName = scenario.scenario;
                  const scenarioInputs = scenario.inputs;
                  
                  console.log(`Triggering ${workflow} with scenario "${scenarioName}":`, JSON.stringify(scenarioInputs, null, 2));
                  
                  // The github rest api for workflow dispatch requires all inputs to be strings.
                  // We need to convert any object values to JSON strings.
                  const inputs = Object.fromEntries(
                    Object.entries(scenarioInputs).map(([key, value]) => {
                      if (typeof value === 'object' && value !== null) {
                        return [key, JSON.stringify(value)];
                      }
                      return [key, value];
                    })
                  );

                  // Trigger the workflow
                  const dispatchResponse = await github.rest.actions.createWorkflowDispatch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: workflow,
                    ref: context.ref,
                    inputs: inputs
                  });
                  
                  console.log(`Workflow dispatch response:`, JSON.stringify(dispatchResponse.data, null, 2));
                  
                  // Wait for 5 seconds for the workflow to be created
                  console.log('Waiting 5 seconds for workflow to be created...');
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  
                  // Get the latest workflow run
                  let attempts = 0;
                  const maxAttempts = 5;
                  let run = null;
                  
                  while (attempts < maxAttempts) {
                    console.log(`Attempt ${attempts + 1} to find workflow run...`);
                    const runs = await github.rest.actions.listWorkflowRuns({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      workflow_id: workflow
                    });
                    
                    if (runs.data.workflow_runs && runs.data.workflow_runs.length > 0) {
                      const potentialRun = runs.data.workflow_runs[0];
                      // Get detailed run information
                      const runDetails = await github.rest.actions.getWorkflowRun({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        run_id: potentialRun.id
                      });
                      
                      console.log(`Found workflow run:`, JSON.stringify({
                        id: runDetails.data.id,
                        status: runDetails.data.status,
                        created_at: runDetails.data.created_at,
                        head_branch: runDetails.data.head_branch,
                        html_url: runDetails.data.html_url
                      }, null, 2));
                      
                      run = runDetails.data;
                      break;
                    }
                    
                    console.log('No matching workflow run found, waiting 5 seconds...');
                    await new Promise(resolve => setTimeout(resolve, 5000));
                    attempts++;
                  }
                  
                  if (!run) {
                    console.log('Failed to find workflow run after all attempts');
                    continue;
                  }
                  
                  workflowRuns.push({
                    workflow: workflow,
                    scenario: scenarioInputs,
                    scenarioName: scenarioName,
                    runId: run.id,
                    runUrl: run.html_url,
                    startTime: run.created_at
                  });
                  
                  console.log(`Successfully tracked workflow run: ${run.id}`);
                } catch (error) {
                  console.error(`Error processing scenario:`, error);
                  console.error(`Error details:`, JSON.stringify(error, null, 2));
                }
              }
            }
            
            allWorkflowRuns.push(...workflowRuns);
          }
          
          console.log(`Total workflow runs tracked: ${allWorkflowRuns.length}`);
          console.log('Workflow runs:', JSON.stringify(allWorkflowRuns, null, 2));
          
          core.setOutput('workflow_runs', JSON.stringify(allWorkflowRuns));

    - name: Wait for workflows and collect results
      id: collect-results
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        script: |
          const workflowRuns = JSON.parse('${{ steps.execute-workflows.outputs.workflow_runs }}');
          const results = [];
          
          for (const run of workflowRuns) {
            console.log(`Processing workflow ${run.workflow} run ${run.runId}...`);
            
            // Get the current workflow run status
            const runData = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.runId
            });
            
            let status = runData.data.status;
            
            // If the workflow is already completed (likely from serial execution), use it directly
            if (status === 'completed') {
              console.log(`Workflow ${run.workflow} is already completed with conclusion: ${runData.data.conclusion}`);
              results.push({
                workflow: run.workflow,
                scenario: run.scenario,
                scenarioName: run.scenarioName,
                status: runData.data.conclusion,
                runId: run.runId,
                runUrl: run.runUrl,
                startTime: run.startTime,
                endTime: runData.data.updated_at
              });
              continue;
            }
            
            // For workflows that are still running (parallel mode), wait for completion
            console.log(`Waiting for workflow ${run.workflow} run ${run.runId}...`);
            
            let attempts = 0;
            const maxAttempts = 60; // 60 minutes maximum wait time
            
            while (status !== 'completed' && attempts < maxAttempts) {
              try {
                // Wait for 60 seconds between checks
                await new Promise(resolve => setTimeout(resolve, 60000));
                
                // Get the workflow run status
                const runData = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.runId
                });
                
                status = runData.data.status;
                console.log(`Workflow ${run.workflow} status: ${status} (attempt ${attempts + 1}/${maxAttempts})`);
                
                // If the workflow is still queued or in progress, continue waiting
                if (status === 'queued' || status === 'in_progress') {
                  attempts++;
                  continue;
                }
                
                // If the workflow is completed, break the loop
                if (status === 'completed') {
                  break;
                }
                
                // If we get here, the status is something unexpected
                console.log(`Unexpected status for workflow ${run.workflow}: ${status}`);
                attempts++;
              } catch (error) {
                console.log(`Error checking workflow status: ${error.message}`);
                attempts++;
              }
            }
            
            if (status !== 'completed') {
              console.log(`Workflow ${run.workflow} did not complete within the maximum wait time`);
              results.push({
                workflow: run.workflow,
                scenario: run.scenario,
                scenarioName: run.scenarioName,
                status: 'timeout',
                runId: run.runId,
                runUrl: run.runUrl,
                startTime: run.startTime,
                endTime: new Date().toISOString()
              });
              continue;
            }
            
            // Get the final workflow run data
            const finalRunData = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.runId
            });
            
            results.push({
              workflow: run.workflow,
              scenario: run.scenario,
              scenarioName: run.scenarioName,
              status: finalRunData.data.conclusion,
              runId: run.runId,
              runUrl: run.runUrl,
              startTime: run.startTime,
              endTime: finalRunData.data.updated_at
            });
          }
          
          core.setOutput('results', JSON.stringify(results));

    - name: Generate Markdown report
      id: generate-report
      shell: bash
      run: |
        TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "Current directory: $(pwd)"
        
        # Generate table rows and summary
        RESULTS='${{ steps.collect-results.outputs.results }}'
        rows=""
        total=0
        success=0
        failure=0
        timeout=0
        cancelled=0
        other_failed=0
        for row in $(echo "$RESULTS" | jq -r '.[] | @base64'); do
          _jq() {
            echo ${row} | base64 --decode | jq -r "$1"
          }
          workflow=$(_jq '.workflow')
          scenario_name=$(_jq '.scenarioName // empty')
          scenario=$(_jq '.scenario | if type=="object" then to_entries | map("\(.key): \(.value)") | join(", ") else tostring end')
          status=$(_jq '.status')
          runUrl=$(_jq '.runUrl')
          startTime=$(_jq '.startTime')
          endTime=$(_jq '.endTime')
          
          # Use scenario name if available, otherwise use the scenario details
          display_scenario="${scenario_name:-${scenario}}"
          
          # Calculate duration
          start=$(date -d "$startTime" +%s)
          end=$(date -d "$endTime" +%s)
          duration=$((end - start))
          duration_str=$(printf '%dh:%dm:%ds' $((duration/3600)) $((duration%3600/60)) $((duration%60)))
          
          # Count status
          total=$((total+1))
          if [ "$status" = "success" ]; then
            success=$((success+1))
          elif [ "$status" = "failure" ]; then
            failure=$((failure+1))
          elif [ "$status" = "timeout" ]; then
            timeout=$((timeout+1))
          elif [ "$status" = "cancelled" ]; then
            cancelled=$((cancelled+1))
          else
            # Any other non-success status
            other_failed=$((other_failed+1))
          fi
          
          # Create table row
          rows+="| ${workflow} | \`${display_scenario}\` | ${status} | ${duration_str} | [View Run](${runUrl}) |\n"
        done
        
        # Create a temporary file with the content
        {
          echo "# Validation Workflow Results"
          echo ""
          echo "## Summary"
          echo "- Total Workflows: ${total}"
          echo "- Successful: ${success}"
          echo "- Failed: ${failure}"
          echo "- Timed Out: ${timeout}"
          echo "- Cancelled: ${cancelled}"
          echo "- Other Failed: ${other_failed}"
          echo ""
          echo "## Detailed Results"
          echo ""
          echo "| Workflow | Scenario | Status | Duration | Run URL |"
          echo "|----------|----------|---------|-----------|----------|"
          echo -e "${rows}"
          echo ""
          echo "## Execution Notes"
          echo "- Workflows marked with \`run_mode: serial\` are executed one after another"
          echo "- Other workflows are executed in parallel"
        } > "${TIMESTAMP}-report.md"

    - name: Upload report
      uses: actions/upload-artifact@v4.6.2
      with:
        name: validation-report-${{ steps.generate-report.outputs.timestamp }}
        path: ${{ steps.generate-report.outputs.timestamp }}-report.md

    - name: Setup Git
      shell: bash
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Create/Update CI Branch
      shell: bash
      run: |
        # Debug information
        echo "Current directory: $(pwd)"
        echo "Listing files in current directory:"
        ls -la
        echo "Listing files in workspace:"
        ls -la $GITHUB_WORKSPACE

        # Find the report file
        REPORT_FILE=$(find $GITHUB_WORKSPACE -name "${{ steps.generate-report.outputs.timestamp }}-report.md")
        echo "Found report file at: $REPORT_FILE"

        if [ ! -f "$REPORT_FILE" ]; then
          echo "Error: Report file not found!"
          exit 1
        fi

        # Fetch all branches
        git fetch origin

        # Check if ci branch exists remotely
        if git ls-remote --exit-code --heads origin ci; then
          echo "ci branch exists. Checking out..."
          git checkout ci
          git pull origin ci
        else
          echo "ci branch does not exist. Creating new ci branch from current HEAD..."
          git checkout -b ci
        fi

        # Use existing ci-report directory if present, otherwise create it
        if [ -d "ci-report" ]; then
          echo "ci-report directory exists. Using existing directory."
        else
          echo "ci-report directory does not exist. Creating it."
          mkdir ci-report
        fi

        # Copy the report to ci-report directory
        cp "$REPORT_FILE" ci-report/

        # Add and commit the report
        git add ci-report/${{ steps.generate-report.outputs.timestamp }}-report.md
        git commit -m "Add validation report ${{ steps.generate-report.outputs.timestamp }}" || echo "Nothing to commit."

        # Push to the ci branch
        git push origin ci

    - name: Output Report URL
      id: output-urls
      shell: bash
      run: |
        REPORT_URL="https://github.com/${{ github.repository }}/blob/ci/ci-report/${{ steps.generate-report.outputs.timestamp }}-report.md"
        RAW_REPORT_URL="https://raw.githubusercontent.com/${{ github.repository }}/ci/ci-report/${{ steps.generate-report.outputs.timestamp }}-report.md"
        
        echo "::notice::📊 Validation Report URL: $REPORT_URL"
        echo "::notice::📊 Raw Report URL: $RAW_REPORT_URL"
        echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT
    
    - name: Check workflow results and fail if any failed
      shell: bash
      run: |
        RESULTS='${{ steps.collect-results.outputs.results }}'
        
        # Parse results and check for failures
        failed_workflows=()
        timeout_workflows=()
        cancelled_workflows=()
        other_failed_workflows=()
        total=0
        success=0
        failure=0
        timeout=0
        cancelled=0
        other_failed=0
        
        for row in $(echo "$RESULTS" | jq -r '.[] | @base64'); do
          _jq() {
            echo ${row} | base64 --decode | jq -r "$1"
          }
          workflow=$(_jq '.workflow')
          scenario_name=$(_jq '.scenarioName // empty')
          scenario=$(_jq '.scenario | if type=="object" then to_entries | map("\(.key): \(.value)") | join(", ") else tostring end')
          status=$(_jq '.status')
          runUrl=$(_jq '.runUrl')
          
          # Use scenario name if available, otherwise use the scenario details
          display_scenario="${scenario_name:-${scenario}}"
          
          # Count status and track failed workflows
          total=$((total+1))
          if [ "$status" = "success" ]; then
            success=$((success+1))
          elif [ "$status" = "failure" ]; then
            failure=$((failure+1))
            failed_workflows+=("${workflow} (${display_scenario}): ${runUrl}")
          elif [ "$status" = "timeout" ]; then
            timeout=$((timeout+1))
            timeout_workflows+=("${workflow} (${display_scenario}): ${runUrl}")
          elif [ "$status" = "cancelled" ]; then
            cancelled=$((cancelled+1))
            cancelled_workflows+=("${workflow} (${display_scenario}): ${runUrl}")
          else
            # Any other non-success status should be treated as a failure
            other_failed=$((other_failed+1))
            other_failed_workflows+=("${workflow} (${display_scenario}) [${status}]: ${runUrl}")
          fi
        done
        
        # Display summary
        echo "::notice::📊 Workflow Execution Summary:"
        echo "::notice::  Total: ${total}, Success: ${success}, Failed: ${failure}, Timeout: ${timeout}, Cancelled: ${cancelled}, Other Failed: ${other_failed}"
        
        # If there are failed workflows, display them and fail the CI
        if [ ${#failed_workflows[@]} -gt 0 ]; then
          echo "::error::❌ The following workflows failed:"
          for failed in "${failed_workflows[@]}"; do
            echo "::error::  - ${failed}"
          done
        fi
        
        # If there are timeout workflows, display them and fail the CI
        if [ ${#timeout_workflows[@]} -gt 0 ]; then
          echo "::error::⏰ The following workflows timed out:"
          for timeout in "${timeout_workflows[@]}"; do
            echo "::error::  - ${timeout}"
          done
        fi
        
        # If there are cancelled workflows, display them and fail the CI
        if [ ${#cancelled_workflows[@]} -gt 0 ]; then
          echo "::error::🚫 The following workflows were cancelled:"
          for cancelled in "${cancelled_workflows[@]}"; do
            echo "::error::  - ${cancelled}"
          done
        fi
        
        # If there are other failed workflows, display them and fail the CI
        if [ ${#other_failed_workflows[@]} -gt 0 ]; then
          echo "::error::❌ The following workflows failed with other statuses:"
          for other_failed in "${other_failed_workflows[@]}"; do
            echo "::error::  - ${other_failed}"
          done
        fi
        
        # Fail the CI workflow if any workflow failed, timed out, was cancelled, or had other failure statuses
        if [ ${#failed_workflows[@]} -gt 0 ] || [ ${#timeout_workflows[@]} -gt 0 ] || [ ${#cancelled_workflows[@]} -gt 0 ] || [ ${#other_failed_workflows[@]} -gt 0 ]; then
          echo "::error::❌ CI workflow failed because ${#failed_workflows[@]} workflow(s) failed, ${#timeout_workflows[@]} workflow(s) timed out, ${#cancelled_workflows[@]} workflow(s) were cancelled, and ${#other_failed_workflows[@]} workflow(s) had other failure statuses."
          exit 1
        fi
        
        echo "::notice::✅ All workflows completed successfully!"